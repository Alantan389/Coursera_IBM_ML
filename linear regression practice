{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import pylab as pl\n",
    "import numpy as np\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py:3418: DtypeWarning: Columns (0,4,8,9,10,11,12) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n"
     ]
    }
   ],
   "source": [
    "df= pd.read_csv(\"/Users/balance/Desktop/IBM PYTHON/Original MY2000-2014 Fuel Consumption Ratings (2-cycle).csv\",encoding='latin-1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(14275, 221)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MODEL - 0%\n",
      "MAKE - 0%\n",
      "MODEL.1 - 0%\n",
      "VEHICLE CLASS - 0%\n",
      "ENGINE SIZE - 0%\n",
      "CYLINDERS - 0%\n",
      "TRANSMISSION - 0%\n",
      "FUEL - 0%\n",
      "FUEL CONSUMPTION - 0%\n",
      "Unnamed: 9 - 0%\n",
      "Unnamed: 10 - 0%\n",
      "Unnamed: 11 - 0%\n",
      "CO2 EMISSIONS  - 0%\n",
      "Unnamed: 13 - 100%\n",
      "Unnamed: 14 - 100%\n",
      "Unnamed: 15 - 100%\n",
      "Unnamed: 16 - 100%\n",
      "Unnamed: 17 - 100%\n",
      "Unnamed: 18 - 100%\n",
      "Unnamed: 19 - 100%\n",
      "Unnamed: 20 - 100%\n",
      "Unnamed: 21 - 100%\n",
      "Unnamed: 22 - 100%\n",
      "Unnamed: 23 - 100%\n",
      "Unnamed: 24 - 100%\n",
      "Unnamed: 25 - 100%\n",
      "Unnamed: 26 - 100%\n",
      "Unnamed: 27 - 100%\n",
      "Unnamed: 28 - 100%\n",
      "Unnamed: 29 - 100%\n",
      "Unnamed: 30 - 100%\n",
      "Unnamed: 31 - 100%\n",
      "Unnamed: 32 - 100%\n",
      "Unnamed: 33 - 100%\n",
      "Unnamed: 34 - 100%\n",
      "Unnamed: 35 - 100%\n",
      "Unnamed: 36 - 100%\n",
      "Unnamed: 37 - 100%\n",
      "Unnamed: 38 - 100%\n",
      "Unnamed: 39 - 100%\n",
      "Unnamed: 40 - 100%\n",
      "Unnamed: 41 - 100%\n",
      "Unnamed: 42 - 100%\n",
      "Unnamed: 43 - 100%\n",
      "Unnamed: 44 - 100%\n",
      "Unnamed: 45 - 100%\n",
      "Unnamed: 46 - 100%\n",
      "Unnamed: 47 - 100%\n",
      "Unnamed: 48 - 100%\n",
      "Unnamed: 49 - 100%\n",
      "Unnamed: 50 - 100%\n",
      "Unnamed: 51 - 100%\n",
      "Unnamed: 52 - 100%\n",
      "Unnamed: 53 - 100%\n",
      "Unnamed: 54 - 100%\n",
      "Unnamed: 55 - 100%\n",
      "Unnamed: 56 - 100%\n",
      "Unnamed: 57 - 100%\n",
      "Unnamed: 58 - 100%\n",
      "Unnamed: 59 - 100%\n",
      "Unnamed: 60 - 100%\n",
      "Unnamed: 61 - 100%\n",
      "Unnamed: 62 - 100%\n",
      "Unnamed: 63 - 100%\n",
      "Unnamed: 64 - 100%\n",
      "Unnamed: 65 - 100%\n",
      "Unnamed: 66 - 100%\n",
      "Unnamed: 67 - 100%\n",
      "Unnamed: 68 - 100%\n",
      "Unnamed: 69 - 100%\n",
      "Unnamed: 70 - 100%\n",
      "Unnamed: 71 - 100%\n",
      "Unnamed: 72 - 100%\n",
      "Unnamed: 73 - 100%\n",
      "Unnamed: 74 - 100%\n",
      "Unnamed: 75 - 100%\n",
      "Unnamed: 76 - 100%\n",
      "Unnamed: 77 - 100%\n",
      "Unnamed: 78 - 100%\n",
      "Unnamed: 79 - 100%\n",
      "Unnamed: 80 - 100%\n",
      "Unnamed: 81 - 100%\n",
      "Unnamed: 82 - 100%\n",
      "Unnamed: 83 - 100%\n",
      "Unnamed: 84 - 100%\n",
      "Unnamed: 85 - 100%\n",
      "Unnamed: 86 - 100%\n",
      "Unnamed: 87 - 100%\n",
      "Unnamed: 88 - 100%\n",
      "Unnamed: 89 - 100%\n",
      "Unnamed: 90 - 100%\n",
      "Unnamed: 91 - 100%\n",
      "Unnamed: 92 - 100%\n",
      "Unnamed: 93 - 100%\n",
      "Unnamed: 94 - 100%\n",
      "Unnamed: 95 - 100%\n",
      "Unnamed: 96 - 100%\n",
      "Unnamed: 97 - 100%\n",
      "Unnamed: 98 - 100%\n",
      "Unnamed: 99 - 100%\n",
      "Unnamed: 100 - 100%\n",
      "Unnamed: 101 - 100%\n",
      "Unnamed: 102 - 100%\n",
      "Unnamed: 103 - 100%\n",
      "Unnamed: 104 - 100%\n",
      "Unnamed: 105 - 100%\n",
      "Unnamed: 106 - 100%\n",
      "Unnamed: 107 - 100%\n",
      "Unnamed: 108 - 100%\n",
      "Unnamed: 109 - 100%\n",
      "Unnamed: 110 - 100%\n",
      "Unnamed: 111 - 100%\n",
      "Unnamed: 112 - 100%\n",
      "Unnamed: 113 - 100%\n",
      "Unnamed: 114 - 100%\n",
      "Unnamed: 115 - 100%\n",
      "Unnamed: 116 - 100%\n",
      "Unnamed: 117 - 100%\n",
      "Unnamed: 118 - 100%\n",
      "Unnamed: 119 - 100%\n",
      "Unnamed: 120 - 100%\n",
      "Unnamed: 121 - 100%\n",
      "Unnamed: 122 - 100%\n",
      "Unnamed: 123 - 100%\n",
      "Unnamed: 124 - 100%\n",
      "Unnamed: 125 - 100%\n",
      "Unnamed: 126 - 100%\n",
      "Unnamed: 127 - 100%\n",
      "Unnamed: 128 - 100%\n",
      "Unnamed: 129 - 100%\n",
      "Unnamed: 130 - 100%\n",
      "Unnamed: 131 - 100%\n",
      "Unnamed: 132 - 100%\n",
      "Unnamed: 133 - 100%\n",
      "Unnamed: 134 - 100%\n",
      "Unnamed: 135 - 100%\n",
      "Unnamed: 136 - 100%\n",
      "Unnamed: 137 - 100%\n",
      "Unnamed: 138 - 100%\n",
      "Unnamed: 139 - 100%\n",
      "Unnamed: 140 - 100%\n",
      "Unnamed: 141 - 100%\n",
      "Unnamed: 142 - 100%\n",
      "Unnamed: 143 - 100%\n",
      "Unnamed: 144 - 100%\n",
      "Unnamed: 145 - 100%\n",
      "Unnamed: 146 - 100%\n",
      "Unnamed: 147 - 100%\n",
      "Unnamed: 148 - 100%\n",
      "Unnamed: 149 - 100%\n",
      "Unnamed: 150 - 100%\n",
      "Unnamed: 151 - 100%\n",
      "Unnamed: 152 - 100%\n",
      "Unnamed: 153 - 100%\n",
      "Unnamed: 154 - 100%\n",
      "Unnamed: 155 - 100%\n",
      "Unnamed: 156 - 100%\n",
      "Unnamed: 157 - 100%\n",
      "Unnamed: 158 - 100%\n",
      "Unnamed: 159 - 100%\n",
      "Unnamed: 160 - 100%\n",
      "Unnamed: 161 - 100%\n",
      "Unnamed: 162 - 100%\n",
      "Unnamed: 163 - 100%\n",
      "Unnamed: 164 - 100%\n",
      "Unnamed: 165 - 100%\n",
      "Unnamed: 166 - 100%\n",
      "Unnamed: 167 - 100%\n",
      "Unnamed: 168 - 100%\n",
      "Unnamed: 169 - 100%\n",
      "Unnamed: 170 - 100%\n",
      "Unnamed: 171 - 100%\n",
      "Unnamed: 172 - 100%\n",
      "Unnamed: 173 - 100%\n",
      "Unnamed: 174 - 100%\n",
      "Unnamed: 175 - 100%\n",
      "Unnamed: 176 - 100%\n",
      "Unnamed: 177 - 100%\n",
      "Unnamed: 178 - 100%\n",
      "Unnamed: 179 - 100%\n",
      "Unnamed: 180 - 100%\n",
      "Unnamed: 181 - 100%\n",
      "Unnamed: 182 - 100%\n",
      "Unnamed: 183 - 100%\n",
      "Unnamed: 184 - 100%\n",
      "Unnamed: 185 - 100%\n",
      "Unnamed: 186 - 100%\n",
      "Unnamed: 187 - 100%\n",
      "Unnamed: 188 - 100%\n",
      "Unnamed: 189 - 100%\n",
      "Unnamed: 190 - 100%\n",
      "Unnamed: 191 - 100%\n",
      "Unnamed: 192 - 100%\n",
      "Unnamed: 193 - 100%\n",
      "Unnamed: 194 - 100%\n",
      "Unnamed: 195 - 100%\n",
      "Unnamed: 196 - 100%\n",
      "Unnamed: 197 - 100%\n",
      "Unnamed: 198 - 100%\n",
      "Unnamed: 199 - 100%\n",
      "Unnamed: 200 - 100%\n",
      "Unnamed: 201 - 100%\n",
      "Unnamed: 202 - 100%\n",
      "Unnamed: 203 - 100%\n",
      "Unnamed: 204 - 100%\n",
      "Unnamed: 205 - 100%\n",
      "Unnamed: 206 - 100%\n",
      "Unnamed: 207 - 100%\n",
      "Unnamed: 208 - 100%\n",
      "Unnamed: 209 - 100%\n",
      "Unnamed: 210 - 100%\n",
      "Unnamed: 211 - 100%\n",
      "Unnamed: 212 - 100%\n",
      "Unnamed: 213 - 100%\n",
      "Unnamed: 214 - 100%\n",
      "Unnamed: 215 - 100%\n",
      "Unnamed: 216 - 100%\n",
      "Unnamed: 217 - 100%\n",
      "Unnamed: 218 - 100%\n",
      "Unnamed: 219 - 100%\n",
      "Unnamed: 220 - 100%\n"
     ]
    }
   ],
   "source": [
    "for col in df.columns:\n",
    "    pct_missing = np.mean(df[col].isnull())\n",
    "    print('{} - {}%'.format(col, round(pct_missing*100)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-6-c95df54f3ba1>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-6-c95df54f3ba1>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    condition=df[col].isnull()> 90%\u001b[0m\n\u001b[0m                                   ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "condition=df[col].isnull()> 90%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "## remove paticular columns by certain condition\n",
    "\n",
    "threshold = 0.9  # 90% threshold\n",
    "columns_to_remove = df.columns[df.isnull().mean() > threshold]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = df.drop(columns=columns_to_remove)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(14275, 13)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MODEL</th>\n",
       "      <th>MAKE</th>\n",
       "      <th>MODEL.1</th>\n",
       "      <th>VEHICLE CLASS</th>\n",
       "      <th>ENGINE SIZE</th>\n",
       "      <th>CYLINDERS</th>\n",
       "      <th>TRANSMISSION</th>\n",
       "      <th>FUEL</th>\n",
       "      <th>FUEL CONSUMPTION</th>\n",
       "      <th>Unnamed: 9</th>\n",
       "      <th>Unnamed: 10</th>\n",
       "      <th>Unnamed: 11</th>\n",
       "      <th>CO2 EMISSIONS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>YEAR</td>\n",
       "      <td>NaN</td>\n",
       "      <td># = high output engine</td>\n",
       "      <td>NaN</td>\n",
       "      <td>(L)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>TYPE</td>\n",
       "      <td>CITY (L/100 km)</td>\n",
       "      <td>HWY (L/100 km)</td>\n",
       "      <td>COMB (L/100 km)</td>\n",
       "      <td>COMB (mpg)</td>\n",
       "      <td>(g/km)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2000</td>\n",
       "      <td>ACURA</td>\n",
       "      <td>1.6EL</td>\n",
       "      <td>COMPACT</td>\n",
       "      <td>1.6</td>\n",
       "      <td>4.0</td>\n",
       "      <td>A4</td>\n",
       "      <td>X</td>\n",
       "      <td>9.2</td>\n",
       "      <td>6.7</td>\n",
       "      <td>8.1</td>\n",
       "      <td>35</td>\n",
       "      <td>186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2000</td>\n",
       "      <td>ACURA</td>\n",
       "      <td>1.6EL</td>\n",
       "      <td>COMPACT</td>\n",
       "      <td>1.6</td>\n",
       "      <td>4.0</td>\n",
       "      <td>M5</td>\n",
       "      <td>X</td>\n",
       "      <td>8.5</td>\n",
       "      <td>6.5</td>\n",
       "      <td>7.6</td>\n",
       "      <td>37</td>\n",
       "      <td>175</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2000</td>\n",
       "      <td>ACURA</td>\n",
       "      <td>3.2TL</td>\n",
       "      <td>MID-SIZE</td>\n",
       "      <td>3.2</td>\n",
       "      <td>6.0</td>\n",
       "      <td>AS5</td>\n",
       "      <td>Z</td>\n",
       "      <td>12.2</td>\n",
       "      <td>7.4</td>\n",
       "      <td>10.0</td>\n",
       "      <td>28</td>\n",
       "      <td>230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2000</td>\n",
       "      <td>ACURA</td>\n",
       "      <td>3.5RL</td>\n",
       "      <td>MID-SIZE</td>\n",
       "      <td>3.5</td>\n",
       "      <td>6.0</td>\n",
       "      <td>A4</td>\n",
       "      <td>Z</td>\n",
       "      <td>13.4</td>\n",
       "      <td>9.2</td>\n",
       "      <td>11.5</td>\n",
       "      <td>25</td>\n",
       "      <td>264</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  MODEL   MAKE                 MODEL.1 VEHICLE CLASS ENGINE SIZE  CYLINDERS  \\\n",
       "0  YEAR    NaN  # = high output engine           NaN         (L)        NaN   \n",
       "1  2000  ACURA                   1.6EL       COMPACT         1.6        4.0   \n",
       "2  2000  ACURA                   1.6EL       COMPACT         1.6        4.0   \n",
       "3  2000  ACURA                   3.2TL      MID-SIZE         3.2        6.0   \n",
       "4  2000  ACURA                   3.5RL      MID-SIZE         3.5        6.0   \n",
       "\n",
       "  TRANSMISSION  FUEL FUEL CONSUMPTION      Unnamed: 9      Unnamed: 10  \\\n",
       "0          NaN  TYPE  CITY (L/100 km)  HWY (L/100 km)  COMB (L/100 km)   \n",
       "1           A4     X              9.2             6.7              8.1   \n",
       "2           M5     X              8.5             6.5              7.6   \n",
       "3          AS5     Z             12.2             7.4             10.0   \n",
       "4           A4     Z             13.4             9.2             11.5   \n",
       "\n",
       "  Unnamed: 11 CO2 EMISSIONS   \n",
       "0  COMB (mpg)         (g/km)  \n",
       "1          35            186  \n",
       "2          37            175  \n",
       "3          28            230  \n",
       "4          25            264  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "## remove row\n",
    "\n",
    "remove_row=[0,2]\n",
    "df2=df1.drop(remove_row)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MODEL</th>\n",
       "      <th>MAKE</th>\n",
       "      <th>MODEL.1</th>\n",
       "      <th>VEHICLE CLASS</th>\n",
       "      <th>ENGINE SIZE</th>\n",
       "      <th>CYLINDERS</th>\n",
       "      <th>TRANSMISSION</th>\n",
       "      <th>FUEL</th>\n",
       "      <th>FUEL CONSUMPTION</th>\n",
       "      <th>Unnamed: 9</th>\n",
       "      <th>Unnamed: 10</th>\n",
       "      <th>Unnamed: 11</th>\n",
       "      <th>CO2 EMISSIONS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2000</td>\n",
       "      <td>ACURA</td>\n",
       "      <td>1.6EL</td>\n",
       "      <td>COMPACT</td>\n",
       "      <td>1.6</td>\n",
       "      <td>4.0</td>\n",
       "      <td>A4</td>\n",
       "      <td>X</td>\n",
       "      <td>9.2</td>\n",
       "      <td>6.7</td>\n",
       "      <td>8.1</td>\n",
       "      <td>35</td>\n",
       "      <td>186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2000</td>\n",
       "      <td>ACURA</td>\n",
       "      <td>3.2TL</td>\n",
       "      <td>MID-SIZE</td>\n",
       "      <td>3.2</td>\n",
       "      <td>6.0</td>\n",
       "      <td>AS5</td>\n",
       "      <td>Z</td>\n",
       "      <td>12.2</td>\n",
       "      <td>7.4</td>\n",
       "      <td>10.0</td>\n",
       "      <td>28</td>\n",
       "      <td>230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2000</td>\n",
       "      <td>ACURA</td>\n",
       "      <td>3.5RL</td>\n",
       "      <td>MID-SIZE</td>\n",
       "      <td>3.5</td>\n",
       "      <td>6.0</td>\n",
       "      <td>A4</td>\n",
       "      <td>Z</td>\n",
       "      <td>13.4</td>\n",
       "      <td>9.2</td>\n",
       "      <td>11.5</td>\n",
       "      <td>25</td>\n",
       "      <td>264</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2000</td>\n",
       "      <td>ACURA</td>\n",
       "      <td>INTEGRA</td>\n",
       "      <td>SUBCOMPACT</td>\n",
       "      <td>1.8</td>\n",
       "      <td>4.0</td>\n",
       "      <td>A4</td>\n",
       "      <td>X</td>\n",
       "      <td>10.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>8.6</td>\n",
       "      <td>33</td>\n",
       "      <td>198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2000</td>\n",
       "      <td>ACURA</td>\n",
       "      <td>INTEGRA</td>\n",
       "      <td>SUBCOMPACT</td>\n",
       "      <td>1.8</td>\n",
       "      <td>4.0</td>\n",
       "      <td>M5</td>\n",
       "      <td>X</td>\n",
       "      <td>9.3</td>\n",
       "      <td>6.8</td>\n",
       "      <td>8.2</td>\n",
       "      <td>34</td>\n",
       "      <td>189</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  MODEL   MAKE  MODEL.1 VEHICLE CLASS ENGINE SIZE  CYLINDERS TRANSMISSION  \\\n",
       "1  2000  ACURA    1.6EL       COMPACT         1.6        4.0           A4   \n",
       "3  2000  ACURA    3.2TL      MID-SIZE         3.2        6.0          AS5   \n",
       "4  2000  ACURA    3.5RL      MID-SIZE         3.5        6.0           A4   \n",
       "5  2000  ACURA  INTEGRA    SUBCOMPACT         1.8        4.0           A4   \n",
       "6  2000  ACURA  INTEGRA    SUBCOMPACT         1.8        4.0           M5   \n",
       "\n",
       "  FUEL FUEL CONSUMPTION Unnamed: 9 Unnamed: 10 Unnamed: 11 CO2 EMISSIONS   \n",
       "1    X              9.2        6.7         8.1          35            186  \n",
       "3    Z             12.2        7.4        10.0          28            230  \n",
       "4    Z             13.4        9.2        11.5          25            264  \n",
       "5    X             10.0        7.0         8.6          33            198  \n",
       "6    X              9.3        6.8         8.2          34            189  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ENGINE SIZE</th>\n",
       "      <th>CYLINDERS</th>\n",
       "      <th>FUEL CONSUMPTION</th>\n",
       "      <th>CO2 EMISSIONS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.6</td>\n",
       "      <td>4.0</td>\n",
       "      <td>9.2</td>\n",
       "      <td>186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.2</td>\n",
       "      <td>6.0</td>\n",
       "      <td>12.2</td>\n",
       "      <td>230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3.5</td>\n",
       "      <td>6.0</td>\n",
       "      <td>13.4</td>\n",
       "      <td>264</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1.8</td>\n",
       "      <td>4.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1.8</td>\n",
       "      <td>4.0</td>\n",
       "      <td>9.3</td>\n",
       "      <td>189</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1.8</td>\n",
       "      <td>4.0</td>\n",
       "      <td>9.4</td>\n",
       "      <td>191</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>3.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>13.6</td>\n",
       "      <td>267</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>3.2</td>\n",
       "      <td>6.0</td>\n",
       "      <td>13.8</td>\n",
       "      <td>269</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1.8</td>\n",
       "      <td>4.0</td>\n",
       "      <td>11.4</td>\n",
       "      <td>218</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ENGINE SIZE  CYLINDERS FUEL CONSUMPTION CO2 EMISSIONS \n",
       "1          1.6        4.0              9.2            186\n",
       "3          3.2        6.0             12.2            230\n",
       "4          3.5        6.0             13.4            264\n",
       "5          1.8        4.0             10.0            198\n",
       "6          1.8        4.0              9.3            189\n",
       "7          1.8        4.0              9.4            191\n",
       "8          3.0        6.0             13.6            267\n",
       "9          3.2        6.0             13.8            269\n",
       "10         1.8        4.0             11.4            218"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cdf = df2[['ENGINE SIZE','CYLINDERS','FUEL CONSUMPTION','CO2 EMISSIONS ']]\n",
    "cdf.head(9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['ENGINE SIZE', 'CYLINDERS', 'FUEL CONSUMPTION', 'CO2 EMISSIONS '], dtype='object')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cdf.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "hist method requires numerical or datetime columns, nothing to plot.",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-15-09f8a2501840>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mviz\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'ENGINE SIZE'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'CO2 EMISSIONS '\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'FUEL CONSUMPTION'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mviz\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/pandas/plotting/_core.py\u001b[0m in \u001b[0;36mhist_frame\u001b[0;34m(data, column, by, grid, xlabelsize, xrot, ylabelsize, yrot, ax, sharex, sharey, figsize, layout, bins, backend, legend, **kwargs)\u001b[0m\n\u001b[1;32m    240\u001b[0m         \u001b[0mlegend\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlegend\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    241\u001b[0m         \u001b[0mbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbins\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 242\u001b[0;31m         \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    243\u001b[0m     )\n\u001b[1;32m    244\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/pandas/plotting/_matplotlib/hist.py\u001b[0m in \u001b[0;36mhist_frame\u001b[0;34m(data, column, by, grid, xlabelsize, xrot, ylabelsize, yrot, ax, sharex, sharey, figsize, layout, bins, legend, **kwds)\u001b[0m\n\u001b[1;32m    442\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mnaxes\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    443\u001b[0m         raise ValueError(\n\u001b[0;32m--> 444\u001b[0;31m             \u001b[0;34m\"hist method requires numerical or datetime columns, nothing to plot.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    445\u001b[0m         )\n\u001b[1;32m    446\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: hist method requires numerical or datetime columns, nothing to plot."
     ]
    }
   ],
   "source": [
    "viz = cdf[['ENGINE SIZE','CO2 EMISSIONS ','FUEL CONSUMPTION']]\n",
    "viz.hist()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "## unable to plot the columns, check data type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ENGINE SIZE          object\n",
      "CYLINDERS           float64\n",
      "FUEL CONSUMPTION     object\n",
      "CO2 EMISSIONS        object\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "print(cdf.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n",
      "/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n",
      "/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n"
     ]
    }
   ],
   "source": [
    "cdf['ENGINE SIZE'] = cdf['ENGINE SIZE'].astype(float)\n",
    "cdf['CO2 EMISSIONS '] = cdf['CO2 EMISSIONS '].astype(float)\n",
    "cdf['FUEL CONSUMPTION'] = cdf['FUEL CONSUMPTION'].astype(float)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 864x648 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "viz = cdf[['CYLINDERS','ENGINE SIZE','CO2 EMISSIONS ','FUEL CONSUMPTION']]\n",
    "viz.hist()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<AxesSubplot:title={'center':'CYLINDERS'}>,\n",
       "        <AxesSubplot:title={'center':'ENGINE SIZE'}>],\n",
       "       [<AxesSubplot:title={'center':'CO2 EMISSIONS '}>,\n",
       "        <AxesSubplot:title={'center':'FUEL CONSUMPTION'}>]], dtype=object)"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "viz.hist()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x648 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12, 9))\n",
    "plt.scatter(cdf['FUEL CONSUMPTION'], cdf['CO2 EMISSIONS '],  color='green')\n",
    "plt.xlabel(\"FUELCONSUMPTION\")\n",
    "plt.ylabel(\"Emission\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "msk = np.random.rand(len(df2)) < 0.8\n",
    "train = cdf[msk]\n",
    "test = cdf[~msk]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x648 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12, 9))\n",
    "plt.scatter(train['FUEL CONSUMPTION'], train['CO2 EMISSIONS '],  color='blue')\n",
    "plt.xlabel(\"FUEL CONSUMPTION\")\n",
    "plt.ylabel(\"CO2 EMISSIONS \")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Input contains NaN, infinity or a value too large for dtype('float64').",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-23-d17ac8f2cf75>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mtrain_x\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masanyarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'FUEL CONSUMPTION'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mtrain_y\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masanyarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'CO2 EMISSIONS '\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mregr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_x\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_y\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;31m# The coefficients\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'Coefficients: '\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mregr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcoef_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/sklearn/linear_model/_base.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    660\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    661\u001b[0m         X, y = self._validate_data(\n\u001b[0;32m--> 662\u001b[0;31m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maccept_sparse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_numeric\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmulti_output\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    663\u001b[0m         )\n\u001b[1;32m    664\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    570\u001b[0m                 \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_y_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    571\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 572\u001b[0;31m                 \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_X_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    573\u001b[0m             \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    574\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_X_y\u001b[0;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)\u001b[0m\n\u001b[1;32m    966\u001b[0m         \u001b[0mensure_min_samples\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mensure_min_samples\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    967\u001b[0m         \u001b[0mensure_min_features\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mensure_min_features\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 968\u001b[0;31m         \u001b[0mestimator\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    969\u001b[0m     )\n\u001b[1;32m    970\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator)\u001b[0m\n\u001b[1;32m    790\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    791\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mforce_all_finite\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 792\u001b[0;31m             \u001b[0m_assert_all_finite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_nan\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mforce_all_finite\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"allow-nan\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    793\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    794\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mensure_min_samples\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36m_assert_all_finite\u001b[0;34m(X, allow_nan, msg_dtype)\u001b[0m\n\u001b[1;32m    114\u001b[0m             raise ValueError(\n\u001b[1;32m    115\u001b[0m                 msg_err.format(\n\u001b[0;32m--> 116\u001b[0;31m                     \u001b[0mtype_err\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmsg_dtype\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mmsg_dtype\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    117\u001b[0m                 )\n\u001b[1;32m    118\u001b[0m             )\n",
      "\u001b[0;31mValueError\u001b[0m: Input contains NaN, infinity or a value too large for dtype('float64')."
     ]
    }
   ],
   "source": [
    "from sklearn import linear_model\n",
    "regr = linear_model.LinearRegression()\n",
    "train_x = np.asanyarray(train[['FUEL CONSUMPTION']])\n",
    "train_y = np.asanyarray(train[['CO2 EMISSIONS ']])\n",
    "regr.fit(train_x, train_y)\n",
    "# The coefficients\n",
    "print ('Coefficients: ', regr.coef_)\n",
    "print ('Intercept: ',regr.intercept_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ENGINE SIZE         18\n",
      "CYLINDERS           18\n",
      "FUEL CONSUMPTION    18\n",
      "CO2 EMISSIONS       18\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(train.isnull().sum())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/pandas/util/_decorators.py:311: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return func(*args, **kwargs)\n"
     ]
    }
   ],
   "source": [
    "train.dropna(subset=['FUEL CONSUMPTION', 'CO2 EMISSIONS '], inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n",
      "/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n"
     ]
    }
   ],
   "source": [
    "train['FUEL CONSUMPTION'] = train['FUEL CONSUMPTION'].astype(float)\n",
    "train['CO2 EMISSIONS '] = train['CO2 EMISSIONS '].astype(float)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Coefficients:  [[15.28745556]]\n",
      "Intercept:  [51.09612989]\n"
     ]
    }
   ],
   "source": [
    "train_x = np.asanyarray(train[['FUEL CONSUMPTION']])\n",
    "train_y = np.asanyarray(train[['CO2 EMISSIONS ']])\n",
    "regr.fit(train_x, train_y)\n",
    "\n",
    "# The coefficients\n",
    "print ('Coefficients: ', regr.coef_)\n",
    "print ('Intercept: ',regr.intercept_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Emission')"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x648 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12, 9))\n",
    "plt.scatter(train['FUEL CONSUMPTION'], train['CO2 EMISSIONS '],  color='blue')\n",
    "plt.plot(train_x, regr.coef_[0][0]*train_x + regr.intercept_[0], '-r')\n",
    "plt.xlabel(\"FUEL CONSUMPTION\")\n",
    "plt.ylabel(\"Emission\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Input contains NaN, infinity or a value too large for dtype('float64').",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-29-a16fefccdb09>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mtest_x\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masanyarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'FUEL CONSUMPTION'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mtest_y\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masanyarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'CO2 EMISSIONS '\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mtest_y_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mregr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_x\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Mean absolute error: %.2f\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mabsolute\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_y_\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mtest_y\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/sklearn/linear_model/_base.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    360\u001b[0m             \u001b[0mReturns\u001b[0m \u001b[0mpredicted\u001b[0m \u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    361\u001b[0m         \"\"\"\n\u001b[0;32m--> 362\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_decision_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    363\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    364\u001b[0m     \u001b[0m_preprocess_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstaticmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_preprocess_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/sklearn/linear_model/_base.py\u001b[0m in \u001b[0;36m_decision_function\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    343\u001b[0m         \u001b[0mcheck_is_fitted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    344\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 345\u001b[0;31m         \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"csr\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"csc\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"coo\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreset\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    346\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0msafe_sparse_dot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcoef_\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdense_output\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mintercept_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    347\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    555\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Validation should be done on X, y or both.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    556\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mno_val_X\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mno_val_y\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 557\u001b[0;31m             \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    558\u001b[0m             \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    559\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mno_val_X\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mno_val_y\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator)\u001b[0m\n\u001b[1;32m    790\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    791\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mforce_all_finite\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 792\u001b[0;31m             \u001b[0m_assert_all_finite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_nan\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mforce_all_finite\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"allow-nan\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    793\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    794\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mensure_min_samples\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36m_assert_all_finite\u001b[0;34m(X, allow_nan, msg_dtype)\u001b[0m\n\u001b[1;32m    114\u001b[0m             raise ValueError(\n\u001b[1;32m    115\u001b[0m                 msg_err.format(\n\u001b[0;32m--> 116\u001b[0;31m                     \u001b[0mtype_err\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmsg_dtype\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mmsg_dtype\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    117\u001b[0m                 )\n\u001b[1;32m    118\u001b[0m             )\n",
      "\u001b[0;31mValueError\u001b[0m: Input contains NaN, infinity or a value too large for dtype('float64')."
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "\n",
    "test_x = np.asanyarray(test[['FUEL CONSUMPTION']])\n",
    "test_y = np.asanyarray(test[['CO2 EMISSIONS ']])\n",
    "test_y_ = regr.predict(test_x)\n",
    "\n",
    "print(\"Mean absolute error: %.2f\" % np.mean(np.absolute(test_y_ - test_y)))\n",
    "print(\"Residual sum of squares (MSE): %.2f\" % np.mean((test_y_ - test_y) ** 2))\n",
    "print(\"R2-score: %.2f\" % r2_score(test_y , test_y_) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ENGINE SIZE         3\n",
      "CYLINDERS           3\n",
      "FUEL CONSUMPTION    3\n",
      "CO2 EMISSIONS       3\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(test.isnull().sum())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/pandas/util/_decorators.py:311: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return func(*args, **kwargs)\n"
     ]
    }
   ],
   "source": [
    "test.dropna(subset=['FUEL CONSUMPTION'], inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    }
   ],
   "source": [
    "test['FUEL CONSUMPTION'] = test['FUEL CONSUMPTION'].astype(float)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean absolute error: 14.56\n",
      "Residual sum of squares (MSE): 571.60\n",
      "R2-score: 0.84\n"
     ]
    }
   ],
   "source": [
    "test_x = np.asanyarray(test[['FUEL CONSUMPTION']])\n",
    "test_y = np.asanyarray(test[['CO2 EMISSIONS ']])\n",
    "test_y_ = regr.predict(test_x)\n",
    "\n",
    "print(\"Mean absolute error: %.2f\" % np.mean(np.absolute(test_y_ - test_y)))\n",
    "print(\"Residual sum of squares (MSE): %.2f\" % np.mean((test_y_ - test_y) ** 2))\n",
    "print(\"R2-score: %.2f\" % r2_score(test_y , test_y_) )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
